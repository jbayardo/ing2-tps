Object subclass: #Address	instanceVariableNames: 'id streetName streetNumber town zipCode province'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-1-Model'!!Address methodsFor: 'comparing' stamp: 'JulianBayardo 11/7/2017 00:00'!= anAddress	^ self streetName = anAddress streetName and: (self streetNumber = anAddress streetNumber and: (self town = anAddress town and: (self zipCode = anAddress zipCode and: (self province = anAddress province)))).! !!Address methodsFor: 'comparing' stamp: 'JulianBayardo 11/7/2017 00:08'!hash	^ self streetName hash		bitXor:			(self streetNumber hash bitXor: (self town hash bitXor: (self zipCode hash bitXor: self province hash)))! !!Address methodsFor: 'accessing' stamp: 'HernanWilkinson 10/28/2016 16:12'!town	^town! !!Address methodsFor: 'accessing' stamp: 'HernanWilkinson 10/28/2016 16:11'!province	^province! !!Address methodsFor: 'accessing' stamp: 'HernanWilkinson 10/28/2016 16:13'!zipCode	^zipCode! !!Address methodsFor: 'accessing' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetNumber	^streetNumber ! !!Address methodsFor: 'accessing' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetName	^streetName ! !!Address methodsFor: 'initialization' stamp: 'JulianBayardo 11/6/2017 23:57'!initializeStreet: aStreetName number: aStreetNumber town: aTownName province: aProvinceName zipCode: aZipCode	streetName := aStreetName.	streetNumber := aStreetNumber.	town := aTownName.	province := aProvinceName .	zipCode := aZipCode.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Address class	instanceVariableNames: ''!!Address class methodsFor: 'as yet unclassified' stamp: 'JulianBayardo 11/6/2017 23:55'!street: aStreetName number: aStreetNumber town: aTownName province: aProvinceName zipCode: aZipCode	^ self new initializeStreet: aStreetName number: aStreetNumber town: aTownName province: aProvinceName zipCode: aZipCode! !Object subclass: #Customer	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses identification'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-1-Model'!!Customer methodsFor: 'initialization' stamp: 'JulianBayardo 11/7/2017 00:20'!initialize	addresses := OrderedCollection new! !!Customer methodsFor: 'initialization' stamp: 'JulianBayardo 11/7/2017 00:17'!initializeFirst: aFirstName last: aLastName identificationType: anIdentificationType identificationNumber: anIdentificationNumber	firstName := aFirstName.	lastName := aLastName.	identificationNumber := anIdentificationNumber .	identificationType := anIdentificationType .! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!lastName	^lastName ! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!firstName		^firstName ! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 16:13'!identificationType		^identificationType ! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 16:13'!identificationNumber		^identificationNumber ! !!Customer methodsFor: 'comparing' stamp: 'JulianBayardo 11/16/2017 18:39'!= aCustomer	^ self identificationType = aCustomer identificationType and: (self identificationNumber = aCustomer identificationNumber		and: (self firstName = aCustomer firstName and: self lastName = aCustomer lastName))! !!Customer methodsFor: 'comparing' stamp: 'JulianBayardo 11/16/2017 18:51'!hash	^ self identificationType hash bitXor: (self identificationNumber hash bitXor: (self firstName hash bitXor: (self lastName hash)))! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 10/28/2016 13:27'!addAddress: anAddress 	addresses add: anAddress ! !!Customer methodsFor: 'addresses' stamp: 'JulianBayardo 11/7/2017 00:29'!addresses	^ addresses asSet.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Customer class	instanceVariableNames: ''!!Customer class methodsFor: 'accessing' stamp: 'JulianBayardo 11/7/2017 00:18'!first: aFirstName last: aLastName identificationType: anIdentificationType identificationNumber: anIdentificationNumber	^ self new initializeFirst: aFirstName last: aLastName identificationType: anIdentificationType identificationNumber: anIdentificationNumber .! !Object subclass: #CustomerImport	instanceVariableNames: 'inputStream session currentLine record newCustomer'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-1-Model'!!CustomerImport methodsFor: 'data' stamp: 'JulianBayardo 11/13/2017 19:03'!isCustomerRecord	^ record first = 'C'! !!CustomerImport methodsFor: 'data' stamp: 'JulianBayardo 11/13/2017 23:01'!import: aStream	inputStream := aStream.	newCustomer := nil.	[ self readNextLine ]		whileTrue: [ currentLine isEmpty				ifFalse: [ self createRecordFromLine.					self parseRecord ] ]! !!CustomerImport methodsFor: 'data' stamp: 'JulianBayardo 11/13/2017 19:03'!isAddressRecord	^ record first = 'A'! !!CustomerImport methodsFor: 'data' stamp: 'JulianBayardo 11/13/2017 20:40'!readNextLine	| hasNextLine |	currentLine := inputStream nextLine.	hasNextLine := currentLine notNil.		hasNextLine ifTrue: [ currentLine := currentLine trim ].	^ hasNextLine! !!CustomerImport methodsFor: 'data' stamp: 'DamianFurman 11/9/2017 21:29'!createRecordFromLine	record := currentLine substrings: {$,}.	^ record! !!CustomerImport methodsFor: 'data' stamp: 'JulianBayardo 11/16/2017 18:38'!parseAddress	| streetNumber zipCode |	newCustomer isNil		ifTrue: [ CustomerImportError new signal: self class addressMustHaveCustomer ].	record size = 6		ifFalse: [ CustomerImportError new signal: self class addressRecordSizeError ].	streetNumber := record third.	" Esto se hace con regex porque asInteger parsea el primer digito que encuentra. "	(streetNumber matchesRegex: '-?[0-9]+')		ifFalse: [ CustomerImportError new signal: self class addressStreetNumberMustBeANumber ].	streetNumber := streetNumber asInteger.	streetNumber > 0		ifFalse: [ CustomerImportError new signal: self class addressStreetNumberMustBePositive ].	zipCode := record fifth.	(zipCode matchesRegex: '-?[0-9]+')		ifFalse: [ CustomerImportError new signal: self class zipCodeMustBeANumber ].	zipCode := zipCode asInteger.	zipCode > 0		ifFalse: [ CustomerImportError new signal: self class zipCodeMustBePositive ].	^ Address		street: record second		number: streetNumber		town: record fourth		province: record sixth		zipCode: zipCode! !!CustomerImport methodsFor: 'data' stamp: 'JulianBayardo 11/13/2017 18:47'!parseCustomer	record size = 5		ifFalse: [ CustomerImportError new signal: self class customerRecordSizeError ].	^ Customer		first: record second		last: record third		identificationType: record fourth		identificationNumber: record fifth! !!CustomerImport methodsFor: 'data' stamp: 'JulianBayardo 11/16/2017 19:00'!parseRecord	self isCustomerRecord		ifTrue: [ newCustomer := self parseCustomer.			session add: newCustomer.			^ nil ].	self isAddressRecord		ifTrue: [			newCustomer addAddress: self parseAddress.			^ nil ].	CustomerImportError new signal: self class unknownRecordType! !!CustomerImport methodsFor: 'initialization' stamp: 'DamianFurman 11/9/2017 21:41'!initializeInto: aDatabase	session := aDatabase.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CustomerImport class	instanceVariableNames: ''!!CustomerImport class methodsFor: 'errors' stamp: 'JulianBayardo 11/13/2017 19:05'!addressMustHaveCustomer	^ 'Attempt to import address without a Customer'! !!CustomerImport class methodsFor: 'errors' stamp: 'JulianBayardo 11/13/2017 18:59'!unknownRecordType	^ 'Record begins with invalid identifier'! !!CustomerImport class methodsFor: 'errors' stamp: 'JulianBayardo 11/13/2017 18:47'!customerRecordSizeError	^ 'Customer record length should always be 5'.! !!CustomerImport class methodsFor: 'errors' stamp: 'JulianBayardo 11/13/2017 22:49'!zipCodeMustBePositive	^ 'Zip code must be a positive number'! !!CustomerImport class methodsFor: 'errors' stamp: 'JulianBayardo 11/13/2017 22:25'!addressStreetNumberMustBePositive	^ 'Street number for address must be a positive integer'.! !!CustomerImport class methodsFor: 'errors' stamp: 'JulianBayardo 11/13/2017 18:50'!addressRecordSizeError	^ 'Address record length should always be 6'! !!CustomerImport class methodsFor: 'errors' stamp: 'JulianBayardo 11/13/2017 20:58'!addressStreetNumberMustBeANumber	^ 'Address must have a positive integer as street number.'! !!CustomerImport class methodsFor: 'errors' stamp: 'JulianBayardo 11/13/2017 22:45'!zipCodeMustBeANumber	^ 'Zip code must be a number'! !!CustomerImport class methodsFor: 'instance creation' stamp: 'DamianFurman 11/9/2017 21:40'!into: aDatabase	^ super new initializeInto: aDatabase.! !Exception subclass: #CustomerImportError	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-1-Model'!TestCase subclass: #CustomerImportTest	instanceVariableNames: 'system'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-1-Model'!!CustomerImportTest methodsFor: 'data' stamp: 'JulianBayardo 11/13/2017 21:16'!instanceIncompleteCustomerStream	^ ReadStream on: 'C,Pepe,Sanchez,D,'! !!CustomerImportTest methodsFor: 'data' stamp: 'JulianBayardo 11/13/2017 21:15'!instanceEmptyStream	^ ReadStream on: ''! !!CustomerImportTest methodsFor: 'data' stamp: 'JulianBayardo 11/13/2017 19:32'!instanceJuanPerez	| customer |	customer := Customer		first: 'Juan'		last: 'Perez'		identificationType: 'C'		identificationNumber: '23-25666777-9'.	customer		addAddress:			(Address				street: 'Alem'				number: 1122				town: 'CABA'				province: 'CABA'				zipCode: 1001).	^ customer! !!CustomerImportTest methodsFor: 'data' stamp: 'JulianBayardo 11/13/2017 22:49'!instanceZipCodeNegativeIntegerStream	^ ReadStream		on:			'C,Pepe,Sanchez,D,22333444A,San Martin,2233,Olivos,-21,BsAs'! !!CustomerImportTest methodsFor: 'data' stamp: 'JulianBayardo 11/13/2017 21:17'!instanceWhitespaceSeparatedStream	^ ReadStream		on:			'C,Pepe,Sanchez,D,22333444     C,Juan,Perez,C,23-25666777-9'! !!CustomerImportTest methodsFor: 'data' stamp: 'JulianBayardo 11/13/2017 21:17'!instanceUnknownAddressRecordTypeStream	^ ReadStream		on:			'C,Pepe,Sanchez,D,22333444AA,San Martin,3322,Olivos,1636,BsAs'! !!CustomerImportTest methodsFor: 'data' stamp: 'JulianBayardo 11/13/2017 22:49'!instanceZipCodeNotAnIntegerStream	^ ReadStream		on:			'C,Pepe,Sanchez,D,22333444A,San Martin,2233,Olivos,12ss,BsAs'! !!CustomerImportTest methodsFor: 'data' stamp: 'JulianBayardo 11/13/2017 21:17'!instanceSingleAddressStream	^ ReadStream on: 'A,San Martin,3322,Olivos,1636,BsAs'! !!CustomerImportTest methodsFor: 'data' stamp: 'JulianBayardo 11/13/2017 21:16'!instanceIncompleteAddressStream	^ ReadStream		on:			'C,Pepe,Sanchez,D,22333444A,San Martin,3322,Olivos,1636,'! !!CustomerImportTest methodsFor: 'data' stamp: 'JulianBayardo 11/13/2017 19:33'!instancePepeSanchez	| customer |	customer := Customer		first: 'Pepe'		last: 'Sanchez'		identificationType: 'D'		identificationNumber: '22333444'.	customer		addAddress:			(Address				street: 'San Martin'				number: 3322				town: 'Olivos'				province: 'BsAs'				zipCode: 1636).	customer		addAddress:			(Address				street: 'Maipu'				number: 888				town: 'Florida'				province: 'Buenos Aires'				zipCode: 1122).	^ customer.! !!CustomerImportTest methodsFor: 'data' stamp: 'JulianBayardo 11/7/2017 00:39'!instanceCustomerDatabaseStream	^ ReadStream		on:			'C,Pepe,Sanchez,D,22333444A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos AiresC,Juan,Perez,C,23-25666777-9A,Alem,1122,CABA,1001,CABA'! !!CustomerImportTest methodsFor: 'data' stamp: 'JulianBayardo 11/13/2017 22:25'!instanceStreetNumberNegativeIntegerStream	^ ReadStream		on:			'C,Pepe,Sanchez,D,22333444A,San Martin,-33,Olivos,1636,BsAs'! !!CustomerImportTest methodsFor: 'data' stamp: 'JulianBayardo 11/13/2017 21:16'!instanceUnknownCustomerRecordTypeStream	^ ReadStream on: 'CC,Pepe,Sanchez,D,22333444'! !!CustomerImportTest methodsFor: 'data' stamp: 'JulianBayardo 11/13/2017 21:18'!instanceStreetNumberNotAnIntegerStream	^ ReadStream		on:			'C,Pepe,Sanchez,D,22333444A,San Martin,2ll322,Olivos,1636,BsAs'! !!CustomerImportTest methodsFor: 'testing' stamp: 'JulianBayardo 11/16/2017 18:26'!customerImportedWithAddresses: anExpectedCustomer	| customer |	customer := self customerImported: anExpectedCustomer.	self assert: customer addresses equals: anExpectedCustomer addresses.	^ customer.! !!CustomerImportTest methodsFor: 'testing' stamp: 'JulianBayardo 11/16/2017 18:52'!customerImported: anExpectedCustomer	| customer |	customer := system fetchCustomerByIdentification: anExpectedCustomer identificationNumber type: anExpectedCustomer identificationType ifNone: [ self fail ].	self assert: customer equals: anExpectedCustomer.	^ customer! !!CustomerImportTest methodsFor: 'running' stamp: 'JulianBayardo 11/13/2017 21:14'!setUp	system := Enviroment current createCustomerSystem.	system start.	system beginTransaction! !!CustomerImportTest methodsFor: 'running' stamp: 'JulianBayardo 11/13/2017 19:58'!tearDown	system commit.	system close! !!CustomerImportTest methodsFor: 'tests' stamp: 'JulianBayardo 11/16/2017 18:10'!test02customerRecordMustHaveExactlyFiveFields	| inputStream |	inputStream := self instanceIncompleteCustomerStream.	self should: [ (CustomerImport into: system) import: inputStream ] raise: CustomerImportError description: CustomerImport addressRecordSizeError.	self assert: system isEmpty.	inputStream close! !!CustomerImportTest methodsFor: 'tests' stamp: 'JulianBayardo 11/16/2017 18:35'!test07whitespaceIsSkipped	| inputStream |	inputStream := self instanceWhitespaceSeparatedStream.	(CustomerImport into: system) import: inputStream.	self customerImported: self instancePepeSanchez.	self customerImported: self instanceJuanPerez.	self assert: system size equals: 2.	inputStream close! !!CustomerImportTest methodsFor: 'tests' stamp: 'JulianBayardo 11/16/2017 18:35'!test08addressStreetNumberIsANumber	| inputStream |	inputStream := self instanceStreetNumberNotAnIntegerStream.	self should: [ (CustomerImport into: system) import: inputStream ] raise: CustomerImportError description: CustomerImport addressStreetNumberMustBeANumber.	self customerImported: self instancePepeSanchez.	self assert: system size equals: 1.	inputStream close! !!CustomerImportTest methodsFor: 'tests' stamp: 'JulianBayardo 11/16/2017 18:11'!test06addressMustHaveCustomer	| inputStream |	inputStream := self instanceSingleAddressStream.	self should: [ (CustomerImport into: system) import: inputStream ] raise: CustomerImportError description: CustomerImport addressMustHaveCustomer.	self assert: system isEmpty.	inputStream close! !!CustomerImportTest methodsFor: 'tests' stamp: 'JulianBayardo 11/13/2017 23:00'!test12multipleRunsDoNotKeepCustomer	| inputStream importer inputStream2 |	importer := CustomerImport into: system.	inputStream := self instanceCustomerDatabaseStream.	importer import: inputStream.	inputStream close.	inputStream2 := self instanceSingleAddressStream.	self should: [ importer import: inputStream2 ] raise: CustomerImportError description: CustomerImport addressMustHaveCustomer.	inputStream2 close.! !!CustomerImportTest methodsFor: 'tests' stamp: 'JulianBayardo 11/16/2017 18:59'!test13importSupplier	| inputStream |	inputStream := ReadStream on: 'S,Supplier1,D,123'.	(CustomerImport into: system) import: inputStream.	self supplierImported: self instanceSimpleSupplier.	inputStream close! !!CustomerImportTest methodsFor: 'tests' stamp: 'JulianBayardo 11/16/2017 18:35'!test03addressRecordMustHaveExactlySixFields	| inputStream |	inputStream := self instanceIncompleteAddressStream.	self should: [ (CustomerImport into: system) import: inputStream ] raise: CustomerImportError description: CustomerImport addressRecordSizeError.	self customerImported: self instancePepeSanchez.		self assert: system size equals: 1.	inputStream close! !!CustomerImportTest methodsFor: 'tests' stamp: 'JulianBayardo 11/16/2017 18:35'!test09addressStreetNumberIsPositive	| inputStream |	inputStream := self instanceStreetNumberNegativeIntegerStream.	self should: [ (CustomerImport into: system) import: inputStream ] raise: CustomerImportError description: CustomerImport addressStreetNumberMustBePositive.	self customerImported: self instancePepeSanchez.	self assert: system size equals: 1.	inputStream close! !!CustomerImportTest methodsFor: 'tests' stamp: 'JulianBayardo 11/16/2017 18:35'!test00hasAllCustomers	| inputStream |	inputStream := self instanceCustomerDatabaseStream.	(CustomerImport into: system) import: inputStream.	self customerImportedWithAddresses: self instancePepeSanchez.	self customerImportedWithAddresses: self instanceJuanPerez.	self assert: system size equals: 2.	inputStream close! !!CustomerImportTest methodsFor: 'tests' stamp: 'JulianBayardo 11/16/2017 18:35'!test05invalidAddressIdentifierGeneratesError	| inputStream |	inputStream := self instanceUnknownAddressRecordTypeStream.	self should: [ (CustomerImport into: system) import: inputStream ] raise: CustomerImportError description: CustomerImport unknownRecordType.	self customerImported: self instancePepeSanchez.	self assert: system size equals: 1.	inputStream close! !!CustomerImportTest methodsFor: 'tests' stamp: 'JulianBayardo 11/16/2017 18:35'!test11zipCodeIsPositive	| inputStream |	inputStream := self instanceZipCodeNegativeIntegerStream.	self should: [ (CustomerImport into: system) import: inputStream ] raise: CustomerImportError description: CustomerImport zipCodeMustBePositive.	self customerImported: self instancePepeSanchez.		self assert: system size equals: 1.	inputStream close! !!CustomerImportTest methodsFor: 'tests' stamp: 'JulianBayardo 11/16/2017 18:35'!test10zipCodeIsANumber	| inputStream |	inputStream := self instanceZipCodeNotAnIntegerStream.	self should: [ (CustomerImport into: system) import: inputStream ] raise: CustomerImportError description: CustomerImport zipCodeMustBeANumber.	self customerImported: self instancePepeSanchez.	self assert: system size equals: 1.	inputStream close! !!CustomerImportTest methodsFor: 'tests' stamp: 'JulianBayardo 11/16/2017 18:10'!test01emptyStreamDoesNotImport	| inputStream |	inputStream := self instanceEmptyStream.	(CustomerImport into: system) import: inputStream.	self assert: system isEmpty.	inputStream close! !!CustomerImportTest methodsFor: 'tests' stamp: 'JulianBayardo 11/16/2017 18:11'!test04invalidCustomerIdentifierGeneratesError	| inputStream |	inputStream := self instanceUnknownCustomerRecordTypeStream.	self should: [ (CustomerImport into: system) import: inputStream ] raise: CustomerImportError description: CustomerImport unknownRecordType.	self assert: system isEmpty.	inputStream close! !Object subclass: #CustomerSystem	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-1-Model'!!CustomerSystem methodsFor: 'testing' stamp: 'JulianBayardo 11/16/2017 18:46'!fetchCustomerByIdentification: anIdentification type: anIdentificationType ifNone: aBlock	| customers |	customers := self select: [ :aCustomer | aCustomer identificationType = anIdentificationType and: aCustomer identificationNumber = anIdentification ].	customers size = 0		ifTrue: [ ^ aBlock value ].	^ customers at: 1! !!CustomerSystem methodsFor: 'enumerating' stamp: 'JulianBayardo 11/16/2017 18:54'!select: aBlockClosure	^ self all select: aBlockClosure.! !!CustomerSystem methodsFor: 'accessing' stamp: 'JulianBayardo 11/13/2017 22:31'!all	self subclassResponsibility.! !!CustomerSystem methodsFor: 'accessing' stamp: 'JulianBayardo 11/16/2017 18:08'!size	^ self all size.! !!CustomerSystem methodsFor: 'accessing' stamp: 'JulianBayardo 11/16/2017 18:10'!isEmpty	^ self size = 0.! !!CustomerSystem methodsFor: 'initialize-release' stamp: 'JulianBayardo 11/13/2017 22:32'!close	self subclassResponsibility 	! !!CustomerSystem methodsFor: 'initialize-release' stamp: 'JulianBayardo 11/13/2017 22:32'!start	self subclassResponsibility .! !!CustomerSystem methodsFor: 'transaction' stamp: 'JulianBayardo 11/13/2017 22:42'!add: anObject	self subclassResponsibility! !!CustomerSystem methodsFor: 'transaction' stamp: 'JulianBayardo 11/13/2017 22:31'!beginTransaction	self subclassResponsibility! !!CustomerSystem methodsFor: 'transaction' stamp: 'JulianBayardo 11/13/2017 22:32'!commit	self subclassResponsibility ! !Object subclass: #Enviroment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-1-Model'!!Enviroment methodsFor: 'testing' stamp: 'JulianBayardo 11/13/2017 22:28'!createCustomerSystem	self subclassResponsibility .! !!Enviroment methodsFor: 'testing' stamp: 'JulianBayardo 11/13/2017 22:28'!isActive	^ false! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Enviroment class	instanceVariableNames: ''!!Enviroment class methodsFor: 'accessing' stamp: 'JulianBayardo 11/16/2017 18:02'!current	^ (self subclasses collect: [ :aClass | aClass new ])		detect: [ :anEnvironment | anEnvironment isActive ]		ifFound: [ :anEnvironment | ^ anEnvironment ]		ifNone: [ ^ TestEnviroment new ].! !CustomerSystem subclass: #PersistentCustomerSystem	instanceVariableNames: 'session'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-1-Model'!!PersistentCustomerSystem methodsFor: 'transaction' stamp: 'JulianBayardo 11/13/2017 22:41'!add: aCustomer	session persist: aCustomer! !!PersistentCustomerSystem methodsFor: 'transaction' stamp: 'JulianBayardo 11/13/2017 19:56'!beginTransaction	session beginTransaction ! !!PersistentCustomerSystem methodsFor: 'transaction' stamp: 'JulianBayardo 11/13/2017 19:58'!commit	session commit.! !!PersistentCustomerSystem methodsFor: 'accessing' stamp: 'JulianBayardo 11/13/2017 20:51'!all	^ session selectAllOfType: Customer.! !!PersistentCustomerSystem methodsFor: 'enumerating' stamp: 'JulianBayardo 11/13/2017 20:49'!select: aBlockClosure 	^ session select: aBlockClosure ofType: Customer.! !!PersistentCustomerSystem methodsFor: 'initialize-release' stamp: 'JulianBayardo 11/13/2017 20:56'!initialize	session := DataBaseSession for: (Array with: self class addressMapping with: self class customerMapping)! !!PersistentCustomerSystem methodsFor: 'initialize-release' stamp: 'JulianBayardo 11/13/2017 19:59'!close	session close.! !!PersistentCustomerSystem methodsFor: 'initialize-release' stamp: 'JulianBayardo 11/13/2017 19:55'!start	session open.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PersistentCustomerSystem class	instanceVariableNames: ''!!PersistentCustomerSystem class methodsFor: 'data' stamp: 'JulianBayardo 11/13/2017 20:56'!customerMapping	^ ClassMapping		withDefaultTableNameFor: Customer		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #firstName)				with: (EmbededMapping withDefaultFieldNameFor: #lastName)				with: (EmbededMapping withDefaultFieldNameFor: #identificationType)				with: (EmbededMapping withDefaultFieldNameFor: #identificationNumber)				with: (OneToManyMapping withDefaultFieldNameFor: #addresses ofType: Address))! !!PersistentCustomerSystem class methodsFor: 'data' stamp: 'JulianBayardo 11/13/2017 20:56'!addressMapping	^ ClassMapping		withDefaultTableNameFor: Address		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #streetName)				with: (EmbededMapping withDefaultFieldNameFor: #streetNumber)				with: (EmbededMapping withDefaultFieldNameFor: #town)				with: (EmbededMapping withDefaultFieldNameFor: #zipCode)				with: (EmbededMapping withDefaultFieldNameFor: #province))! !Enviroment subclass: #ProductionEnviroment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-1-Model'!!ProductionEnviroment methodsFor: 'testing' stamp: 'JulianBayardo 11/13/2017 21:30'!createCustomerSystem	^ PersistentCustomerSystem new.! !Enviroment subclass: #TestEnviroment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-1-Model'!!TestEnviroment methodsFor: 'testing' stamp: 'JulianBayardo 11/13/2017 21:30'!createCustomerSystem	^ TransientCustomerSystem new! !!TestEnviroment methodsFor: 'testing' stamp: 'JulianBayardo 11/13/2017 22:28'!isActive	^ true! !CustomerSystem subclass: #TransientCustomerSystem	instanceVariableNames: 'persisted'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-1-Model'!!TransientCustomerSystem methodsFor: 'accessing' stamp: 'JulianBayardo 11/13/2017 22:31'!all	^ persisted copy! !!TransientCustomerSystem methodsFor: 'transaction' stamp: 'JulianBayardo 11/13/2017 22:41'!add: anObject	persisted add: anObject! !!TransientCustomerSystem methodsFor: 'transaction' stamp: 'JulianBayardo 11/13/2017 22:34'!beginTransaction! !!TransientCustomerSystem methodsFor: 'transaction' stamp: 'JulianBayardo 11/13/2017 22:34'!commit! !!TransientCustomerSystem methodsFor: 'initialize-release' stamp: 'JulianBayardo 11/13/2017 22:34'!close	! !!TransientCustomerSystem methodsFor: 'initialize-release' stamp: 'JulianBayardo 11/13/2017 22:32'!start	persisted := OrderedCollection new! !