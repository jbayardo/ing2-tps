Object subclass: #Address	instanceVariableNames: 'id streetName streetNumber town zipCode province'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-1-Model'!!Address methodsFor: 'comparing' stamp: 'JulianBayardo 11/7/2017 00:00'!= anAddress	^ self streetName = anAddress streetName and: (self streetNumber = anAddress streetNumber and: (self town = anAddress town and: (self zipCode = anAddress zipCode and: (self province = anAddress province)))).! !!Address methodsFor: 'comparing' stamp: 'JulianBayardo 11/7/2017 00:08'!hash	^ self streetName hash		bitXor:			(self streetNumber hash bitXor: (self town hash bitXor: (self zipCode hash bitXor: self province hash)))! !!Address methodsFor: 'accessing' stamp: 'HernanWilkinson 10/28/2016 16:12'!town	^town! !!Address methodsFor: 'accessing' stamp: 'HernanWilkinson 10/28/2016 16:11'!province	^province! !!Address methodsFor: 'accessing' stamp: 'HernanWilkinson 10/28/2016 16:13'!zipCode	^zipCode! !!Address methodsFor: 'accessing' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetNumber	^streetNumber ! !!Address methodsFor: 'accessing' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetName	^streetName ! !!Address methodsFor: 'initialization' stamp: 'JulianBayardo 11/6/2017 23:57'!initializeStreet: aStreetName number: aStreetNumber town: aTownName province: aProvinceName zipCode: aZipCode	streetName := aStreetName.	streetNumber := aStreetNumber.	town := aTownName.	province := aProvinceName .	zipCode := aZipCode.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Address class	instanceVariableNames: ''!!Address class methodsFor: 'as yet unclassified' stamp: 'JulianBayardo 11/6/2017 23:55'!street: aStreetName number: aStreetNumber town: aTownName province: aProvinceName zipCode: aZipCode	^ self new initializeStreet: aStreetName number: aStreetNumber town: aTownName province: aProvinceName zipCode: aZipCode! !Object subclass: #Customer	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses identification'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-1-Model'!!Customer methodsFor: 'initialization' stamp: 'JulianBayardo 11/7/2017 00:20'!initialize	addresses := OrderedCollection new! !!Customer methodsFor: 'initialization' stamp: 'JulianBayardo 11/7/2017 00:17'!initializeFirst: aFirstName last: aLastName identificationType: anIdentificationType identificationNumber: anIdentificationNumber	firstName := aFirstName.	lastName := aLastName.	identificationNumber := anIdentificationNumber .	identificationType := anIdentificationType .! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!lastName	^lastName ! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!firstName		^firstName ! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 16:13'!identificationType		^identificationType ! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 16:13'!identificationNumber		^identificationNumber ! !!Customer methodsFor: 'comparing' stamp: 'JulianBayardo 11/7/2017 00:30'!= aCustomer	^ self identificationType = aCustomer identificationType		and:			(self identificationNumber = aCustomer identificationNumber				and: (self addresses = aCustomer addresses))! !!Customer methodsFor: 'comparing' stamp: 'JulianBayardo 11/7/2017 00:20'!hash	^ self identificationType hash bitXor: (self identificationNumber hash bitXor: self addresses hash).! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 10/28/2016 13:27'!addAddress: anAddress 	addresses add: anAddress ! !!Customer methodsFor: 'addresses' stamp: 'JulianBayardo 11/7/2017 00:29'!addresses	^ addresses asSet.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Customer class	instanceVariableNames: ''!!Customer class methodsFor: 'accessing' stamp: 'JulianBayardo 11/7/2017 00:18'!first: aFirstName last: aLastName identificationType: anIdentificationType identificationNumber: anIdentificationNumber	^ self new initializeFirst: aFirstName last: aLastName identificationType: anIdentificationType identificationNumber: anIdentificationNumber .! !Object subclass: #CustomerImport	instanceVariableNames: 'inputStream session currentLine record newCustomer'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-1-Model'!!CustomerImport methodsFor: 'data' stamp: 'JulianBayardo 11/13/2017 19:03'!isCustomerRecord	^ record first = 'C'! !!CustomerImport methodsFor: 'data' stamp: 'JulianBayardo 11/13/2017 20:40'!import: aStream	inputStream := aStream.	[ self readNextLine ]		whileTrue: [ currentLine isEmpty ifFalse: [ self createRecordFromLine.			self parseRecord ]  ]! !!CustomerImport methodsFor: 'data' stamp: 'JulianBayardo 11/13/2017 19:03'!isAddressRecord	^ record first = 'A'! !!CustomerImport methodsFor: 'data' stamp: 'JulianBayardo 11/13/2017 20:40'!readNextLine	| hasNextLine |	currentLine := inputStream nextLine.	hasNextLine := currentLine notNil.		hasNextLine ifTrue: [ currentLine := currentLine trim ].	^ hasNextLine! !!CustomerImport methodsFor: 'data' stamp: 'DamianFurman 11/9/2017 21:29'!createRecordFromLine	record := currentLine substrings: {$,}.	^ record! !!CustomerImport methodsFor: 'data' stamp: 'JulianBayardo 11/13/2017 21:23'!parseAddress	| streetNumber |	record size = 6		ifFalse: [ CustomerImportError new signal: self class addressRecordSizeError ].	streetNumber := record third asInteger.	^ Address		street: record second		number: streetNumber		town: record fourth		province: record sixth		zipCode: record fifth asInteger! !!CustomerImport methodsFor: 'data' stamp: 'JulianBayardo 11/13/2017 18:47'!parseCustomer	record size = 5		ifFalse: [ CustomerImportError new signal: self class customerRecordSizeError ].	^ Customer		first: record second		last: record third		identificationType: record fourth		identificationNumber: record fifth! !!CustomerImport methodsFor: 'data' stamp: 'JulianBayardo 11/13/2017 19:06'!parseRecord	self isCustomerRecord		ifTrue: [ newCustomer := self parseCustomer.			session persist: newCustomer.			^ nil ].	self isAddressRecord		ifTrue: [ newCustomer isNil				ifTrue: [ CustomerImportError new signal: self class addressMustHaveCustomer ].			newCustomer addAddress: self parseAddress.			^ nil ].	CustomerImportError new signal: self class unknownRecordType! !!CustomerImport methodsFor: 'initialization' stamp: 'DamianFurman 11/9/2017 21:41'!initializeInto: aDatabase	session := aDatabase.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CustomerImport class	instanceVariableNames: ''!!CustomerImport class methodsFor: 'errors' stamp: 'JulianBayardo 11/13/2017 18:59'!unknownRecordType	^ 'Record begins with invalid identifier'! !!CustomerImport class methodsFor: 'errors' stamp: 'JulianBayardo 11/13/2017 19:05'!addressMustHaveCustomer	^ 'Attempt to import address without a Customer'! !!CustomerImport class methodsFor: 'errors' stamp: 'JulianBayardo 11/13/2017 18:50'!addressRecordSizeError	^ 'Address record length should always be 6'! !!CustomerImport class methodsFor: 'errors' stamp: 'JulianBayardo 11/13/2017 18:47'!customerRecordSizeError	^ 'Customer record length should always be 5'.! !!CustomerImport class methodsFor: 'as yet unclassified' stamp: 'JulianBayardo 11/13/2017 20:58'!addressStreetNumberMustBeANumber	^ 'Address must have a positive integer as street number.'! !!CustomerImport class methodsFor: 'instance creation' stamp: 'DamianFurman 11/9/2017 21:40'!into: aDatabase	^ super new initializeInto: aDatabase.! !Exception subclass: #CustomerImportError	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-1-Model'!TestCase subclass: #CustomerImportTest	instanceVariableNames: 'system'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-1-Model'!!CustomerImportTest methodsFor: 'data' stamp: 'JulianBayardo 11/13/2017 21:16'!instanceIncompleteCustomerStream	^ ReadStream on: 'C,Pepe,Sanchez,D,'! !!CustomerImportTest methodsFor: 'data' stamp: 'JulianBayardo 11/13/2017 21:15'!instanceEmptyStream	^ ReadStream on: ''! !!CustomerImportTest methodsFor: 'data' stamp: 'JulianBayardo 11/13/2017 19:32'!instanceJuanPerez	| customer |	customer := Customer		first: 'Juan'		last: 'Perez'		identificationType: 'C'		identificationNumber: '23-25666777-9'.	customer		addAddress:			(Address				street: 'Alem'				number: 1122				town: 'CABA'				province: 'CABA'				zipCode: 1001).	^ customer! !!CustomerImportTest methodsFor: 'data' stamp: 'JulianBayardo 11/13/2017 21:17'!instanceWhitespaceSeparatedStream	^ ReadStream		on:			'C,Pepe,Sanchez,D,22333444     C,Juan,Perez,C,23-25666777-9'! !!CustomerImportTest methodsFor: 'data' stamp: 'JulianBayardo 11/13/2017 21:17'!instanceUnknownAddressRecordTypeStream	^ ReadStream		on:			'C,Pepe,Sanchez,D,22333444AA,San Martin,3322,Olivos,1636,BsAs'! !!CustomerImportTest methodsFor: 'data' stamp: 'JulianBayardo 11/13/2017 21:17'!instanceSingleAddressStream	^ ReadStream on: 'A,San Martin,3322,Olivos,1636,BsAs'! !!CustomerImportTest methodsFor: 'data' stamp: 'JulianBayardo 11/13/2017 21:16'!instanceIncompleteAddressStream	^ ReadStream		on:			'C,Pepe,Sanchez,D,22333444A,San Martin,3322,Olivos,1636,'! !!CustomerImportTest methodsFor: 'data' stamp: 'JulianBayardo 11/13/2017 19:33'!instancePepeSanchez	| customer |	customer := Customer		first: 'Pepe'		last: 'Sanchez'		identificationType: 'D'		identificationNumber: '22333444'.	customer		addAddress:			(Address				street: 'San Martin'				number: 3322				town: 'Olivos'				province: 'BsAs'				zipCode: 1636).	customer		addAddress:			(Address				street: 'Maipu'				number: 888				town: 'Florida'				province: 'Buenos Aires'				zipCode: 1122).	^ customer.! !!CustomerImportTest methodsFor: 'data' stamp: 'JulianBayardo 11/7/2017 00:39'!instanceCustomerDatabaseStream	^ ReadStream		on:			'C,Pepe,Sanchez,D,22333444A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos AiresC,Juan,Perez,C,23-25666777-9A,Alem,1122,CABA,1001,CABA'! !!CustomerImportTest methodsFor: 'data' stamp: 'JulianBayardo 11/13/2017 21:16'!instanceUnknownCustomerRecordTypeStream	^ ReadStream on: 'CC,Pepe,Sanchez,D,22333444'! !!CustomerImportTest methodsFor: 'data' stamp: 'JulianBayardo 11/13/2017 21:18'!instanceStreetNumberNotAnIntegerStream	^ ReadStream		on:			'C,Pepe,Sanchez,D,22333444A,San Martin,2ll322,Olivos,1636,BsAs'! !!CustomerImportTest methodsFor: 'testing' stamp: 'JulianBayardo 11/13/2017 20:48'!customerImportedCorrectly: aCustomer	| searchResults |	searchResults := system select: [ :anImportedCustomer | anImportedCustomer firstName = aCustomer firstName ].	self assert: searchResults size equals: 1.	self assert: (searchResults at: 1) equals: aCustomer! !!CustomerImportTest methodsFor: 'testing' stamp: 'JulianBayardo 11/13/2017 20:51'!numberOfCustomersIs: aSize	self assert: system all size equals: aSize! !!CustomerImportTest methodsFor: 'running' stamp: 'JulianBayardo 11/13/2017 21:14'!setUp	system := Enviroment current createCustomerSystem.	system start.	system beginTransaction! !!CustomerImportTest methodsFor: 'running' stamp: 'JulianBayardo 11/13/2017 19:58'!tearDown	system commit.	system close! !!CustomerImportTest methodsFor: 'tests' stamp: 'JulianBayardo 11/13/2017 21:16'!test02customerRecordMustHaveExactlyFiveFields	| inputStream |	inputStream := self instanceIncompleteCustomerStream.	self		should: [ (CustomerImport into: system) import: inputStream ]		raise: CustomerImportError		description: CustomerImport addressRecordSizeError.	self numberOfCustomersIs: 0.	inputStream close! !!CustomerImportTest methodsFor: 'tests' stamp: 'JulianBayardo 11/13/2017 21:17'!test07whitespaceIsSkipped	| inputStream |	inputStream := self instanceWhitespaceSeparatedStream.	(CustomerImport into: system) import: inputStream.	self numberOfCustomersIs: 2.	inputStream close! !!CustomerImportTest methodsFor: 'tests' stamp: 'JulianBayardo 11/13/2017 21:18'!test08addressStreetNumberIsANumber	| inputStream |	inputStream := self instanceStreetNumberNotAnIntegerStream.	self		should: [ (CustomerImport into: system) import: inputStream ]		raise: CustomerImportError		description: CustomerImport addressStreetNumberMustBeANumber.	self numberOfCustomersIs: 1.	inputStream close! !!CustomerImportTest methodsFor: 'tests' stamp: 'JulianBayardo 11/13/2017 21:17'!test06addressMustHaveCustomer	| inputStream |	inputStream := self instanceSingleAddressStream.	self		should: [ (CustomerImport into: system) import: inputStream ]		raise: CustomerImportError		description: CustomerImport addressMustHaveCustomer.	self numberOfCustomersIs: 0.	inputStream close! !!CustomerImportTest methodsFor: 'tests' stamp: 'JulianBayardo 11/13/2017 21:16'!test03addressRecordMustHaveExactlySixFields	| inputStream |	inputStream := self instanceIncompleteAddressStream.	self		should: [ (CustomerImport into: system) import: inputStream ]		raise: CustomerImportError		description: CustomerImport addressRecordSizeError.	self numberOfCustomersIs: 1.	inputStream close! !!CustomerImportTest methodsFor: 'tests' stamp: 'JulianBayardo 11/13/2017 20:45'!test00hasAllCustomers	| inputStream |	inputStream := self instanceCustomerDatabaseStream.	(CustomerImport into: system) import: inputStream.	self customerImportedCorrectly: self instancePepeSanchez.	self customerImportedCorrectly: self instanceJuanPerez.	inputStream close! !!CustomerImportTest methodsFor: 'tests' stamp: 'JulianBayardo 11/13/2017 21:17'!test05invalidAddressIdentifierGeneratesError	| inputStream |	inputStream := self instanceUnknownAddressRecordTypeStream.	self		should: [ (CustomerImport into: system) import: inputStream ]		raise: CustomerImportError		description: CustomerImport unknownRecordType.	self numberOfCustomersIs: 1.	inputStream close! !!CustomerImportTest methodsFor: 'tests' stamp: 'JulianBayardo 11/13/2017 21:15'!test01emptyStreamDoesNotImport	| inputStream |	inputStream := self instanceEmptyStream.	(CustomerImport into: system) import: inputStream.	self numberOfCustomersIs: 0.	inputStream close! !!CustomerImportTest methodsFor: 'tests' stamp: 'JulianBayardo 11/13/2017 21:16'!test04invalidCustomerIdentifierGeneratesError	| inputStream |	inputStream := self instanceUnknownCustomerRecordTypeStream.	self		should: [ (CustomerImport into: system) import: inputStream ]		raise: CustomerImportError		description: CustomerImport unknownRecordType.	self numberOfCustomersIs: 0.	inputStream close! !Object subclass: #CustomerSystem	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-1-Model'!Object subclass: #Enviroment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-1-Model'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Enviroment class	instanceVariableNames: ''!!Enviroment class methodsFor: 'accessing' stamp: 'JulianBayardo 11/13/2017 21:29'!current	self subclasses		do: [ :aClass | 			| env |			env := aClass new.			env isActiveEnvironment ifTrue: [ ^ env ] ].	^ nil! !CustomerSystem subclass: #PersistentCustomerSystem	instanceVariableNames: 'session'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-1-Model'!!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'JulianBayardo 11/13/2017 20:49'!select: aBlockClosure 	^ session select: aBlockClosure ofType: Customer.! !!PersistentCustomerSystem methodsFor: 'collection' stamp: 'JulianBayardo 11/13/2017 19:59'!close	session close.! !!PersistentCustomerSystem methodsFor: 'collection' stamp: 'JulianBayardo 11/13/2017 19:58'!commit	session commit.! !!PersistentCustomerSystem methodsFor: 'collection' stamp: 'JulianBayardo 11/13/2017 19:56'!beginTransaction	session beginTransaction ! !!PersistentCustomerSystem methodsFor: 'collection' stamp: 'JulianBayardo 11/13/2017 19:55'!start	session open.! !!PersistentCustomerSystem methodsFor: 'collection' stamp: 'JulianBayardo 11/13/2017 20:51'!all	^ session selectAllOfType: Customer.! !!PersistentCustomerSystem methodsFor: 'collection' stamp: 'JulianBayardo 11/13/2017 20:00'!persist: aCustomer 	session persist: aCustomer.! !!PersistentCustomerSystem methodsFor: 'initialization' stamp: 'JulianBayardo 11/13/2017 20:56'!initialize	session := DataBaseSession for: (Array with: self class addressMapping with: self class customerMapping)! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PersistentCustomerSystem class	instanceVariableNames: ''!!PersistentCustomerSystem class methodsFor: 'data' stamp: 'JulianBayardo 11/13/2017 20:56'!customerMapping	^ ClassMapping		withDefaultTableNameFor: Customer		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #firstName)				with: (EmbededMapping withDefaultFieldNameFor: #lastName)				with: (EmbededMapping withDefaultFieldNameFor: #identificationType)				with: (EmbededMapping withDefaultFieldNameFor: #identificationNumber)				with: (OneToManyMapping withDefaultFieldNameFor: #addresses ofType: Address))! !!PersistentCustomerSystem class methodsFor: 'data' stamp: 'JulianBayardo 11/13/2017 20:56'!addressMapping	^ ClassMapping		withDefaultTableNameFor: Address		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #streetName)				with: (EmbededMapping withDefaultFieldNameFor: #streetNumber)				with: (EmbededMapping withDefaultFieldNameFor: #town)				with: (EmbededMapping withDefaultFieldNameFor: #zipCode)				with: (EmbededMapping withDefaultFieldNameFor: #province))! !Enviroment subclass: #ProductionEnviroment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-1-Model'!!ProductionEnviroment methodsFor: 'testing' stamp: 'JulianBayardo 11/13/2017 21:29'!isActiveEnvironment	^ true.! !!ProductionEnviroment methodsFor: 'testing' stamp: 'JulianBayardo 11/13/2017 21:30'!createCustomerSystem	^ PersistentCustomerSystem new.! !Enviroment subclass: #TestEnviroment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-1-Model'!!TestEnviroment methodsFor: 'testing' stamp: 'JulianBayardo 11/13/2017 21:29'!isActiveEnvironment	^ false.! !!TestEnviroment methodsFor: 'testing' stamp: 'JulianBayardo 11/13/2017 21:30'!createCustomerSystem	^ TransientCustomerSystem new! !CustomerSystem subclass: #TransientCustomerSystem	instanceVariableNames: 'persisted'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-1-Model'!!TransientCustomerSystem methodsFor: 'accessing' stamp: 'JulianBayardo 11/13/2017 20:31'!start	persisted := OrderedCollection new.! !!TransientCustomerSystem methodsFor: 'persistance' stamp: 'JulianBayardo 11/13/2017 20:31'!persist: anObject	persisted add: anObject.! !!TransientCustomerSystem methodsFor: 'initialize-release' stamp: 'JulianBayardo 11/13/2017 20:53'!close! !!TransientCustomerSystem methodsFor: 'as yet unclassified' stamp: 'JulianBayardo 11/13/2017 20:52'!select: aBlockClosure 	^ persisted select: aBlockClosure.! !!TransientCustomerSystem methodsFor: 'as yet unclassified' stamp: 'JulianBayardo 11/13/2017 20:27'!commit	! !!TransientCustomerSystem methodsFor: 'as yet unclassified' stamp: 'JulianBayardo 11/13/2017 20:26'!beginTransaction	! !!TransientCustomerSystem methodsFor: 'as yet unclassified' stamp: 'JulianBayardo 11/13/2017 20:52'!all	^ persisted copy.! !