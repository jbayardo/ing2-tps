Object subclass: #Book	instanceVariableNames: 'titulo autor isbn'	classVariableNames: ''	poolDictionaries: ''	category: 'TusLibros-Ejercicio'!!Book methodsFor: 'accessing' stamp: 'LosPibes 10/26/2017 18:48'!title	^ titulo! !!Book methodsFor: 'accessing' stamp: 'LosPibes 10/26/2017 18:57'!hash	^ self isbn hash.! !!Book methodsFor: 'accessing' stamp: 'LosPibes 10/26/2017 18:57'!= aBook	^ self isbn = aBook isbn.! !!Book methodsFor: 'accessing' stamp: 'LosPibes 10/26/2017 18:45'!isbn	^ isbn! !!Book methodsFor: 'accessing' stamp: 'LosPibes 10/26/2017 18:47'!author	^ autor! !!Book methodsFor: 'initialization' stamp: 'LosPibes 10/26/2017 18:48'!isbn: ISBN title: aTitle author: anAuthor	isbn := ISBN.	titulo := aTitle.	autor := anAuthor.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Book class	instanceVariableNames: ''!!Book class methodsFor: 'as yet unclassified' stamp: 'LosPibes 10/26/2017 18:48'!isbn: ISBN title: titulo author: autor	^ Book new		isbn: ISBN		title: titulo		author: autor.! !TestCase subclass: #BookTests	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TusLibros-Ejercicio'!!BookTests methodsFor: 'tests' stamp: 'LosPibes 10/30/2017 20:28'!test01equalsUsingISBN	| book book2 |	book := Book isbn: 01 title: 'Test' author: 'Pirulo'.	book2 := Book isbn: 01 title: 'Test' author: 'Pirulo'.	self assert: book equals: book2.	self assert: (book hash) equals: (book2 hash).! !Object subclass: #Cart	instanceVariableNames: 'catalogue items'	classVariableNames: ''	poolDictionaries: ''	category: 'TusLibros-Ejercicio'!!Cart methodsFor: 'accessing' stamp: 'LosPibes 10/30/2017 20:30'!size	^ items size! !!Cart methodsFor: 'accessing' stamp: 'LosPibes 10/30/2017 20:30'!list	| aList |	aList := Set new.	items		doWithOccurrences: [ :anItem :occurrences | aList add: (Association key: anItem value: occurrences) ].	^ aList! !!Cart methodsFor: 'accessing' stamp: 'LosPibes 10/30/2017 20:38'!checkStock	self list		do: [ :aBook | 			| book amount |			book := aBook key.			amount := aBook value.			(catalogue stock: book) < amount				ifTrue: [ NoStockException new signal ] ]! !!Cart methodsFor: 'accessing' stamp: 'LosPibes 10/30/2017 20:31'!amount: anItem	^ items occurrencesOf: anItem! !!Cart methodsFor: 'accessing' stamp: 'LosPibes 10/30/2017 20:11'!price	^ self list		inject: 0		into: [ :anAccumulatedPrice :anItem | 			| item amount |			item := anItem key.			amount := anItem value.			anAccumulatedPrice + ((catalogue price: item) * amount) ]! !!Cart methodsFor: 'accessing' stamp: 'LosPibes 10/30/2017 20:30'!isEmpty	^ items size == 0! !!Cart methodsFor: 'as yet unclassified' stamp: 'LosPibes 10/30/2017 21:31'!updateStock	^ catalogue updateStock: self! !!Cart methodsFor: 'adding' stamp: 'LosPibes 10/30/2017 20:31'!add: anItem amount: anAmount	(catalogue includes: anItem)		ifFalse: [ ^ UnknownBookException new signal ].	(anAmount isKindOf: Integer)		ifFalse: [ ^ InvalidAmountException new signal ].	anAmount > 0		ifFalse: [ ^ InvalidAmountException new signal ].	items add: anItem withOccurrences: anAmount.	^ self! !!Cart methodsFor: 'adding' stamp: 'LosPibes 10/30/2017 20:29'!add: anItem	^ self add: anItem amount: 1.! !!Cart methodsFor: 'initialization' stamp: 'LosPibes 10/30/2017 20:30'!initialize	items := Bag new! !!Cart methodsFor: 'initialization' stamp: 'LosPibes 10/26/2017 20:51'!initializeCatalogue: aCatalogue 	catalogue := aCatalogue.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Cart class	instanceVariableNames: ''!!Cart class methodsFor: 'as yet unclassified' stamp: 'LosPibes 10/26/2017 20:59'!withCatalogue: aCatalogue	^ super new initializeCatalogue: aCatalogue! !TestCase subclass: #CartTests	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TusLibros-Ejercicio'!!CartTests methodsFor: 'tests' stamp: 'LosPibes 10/30/2017 20:17'!test13priceSingle	| cart |	cart := Cart withCatalogue: self instanceCatalogueWithPrices.	cart add: 1.	self assert: cart price equals: 10! !!CartTests methodsFor: 'tests' stamp: 'LosPibes 10/30/2017 20:33'!test06ListOfSingleBookHasAccurateCounts	| cart book list computedList |	cart := Cart withCatalogue: self instanceCatalogueWithPrices.	book := 231.	cart add: book.	list := Set new.	list add: (Association key: 231 value: 1).	computedList := cart list.	self assert: computedList size equals: 1.	self assert: computedList equals: list! !!CartTests methodsFor: 'tests' stamp: 'LosPibes 10/30/2017 20:33'!test00newCarIsEmpty	| cart |	cart := Cart withCatalogue: self instanceCatalogueWithPrices.	self assert: cart isEmpty! !!CartTests methodsFor: 'tests' stamp: 'LosPibes 10/30/2017 20:17'!test15priceSingleMultipleUnits	| cart |	cart := Cart withCatalogue: self instanceCatalogueWithPrices.	cart add: 1.	cart add: 1.	self assert: cart price equals: 20! !!CartTests methodsFor: 'tests' stamp: 'LosPibes 10/30/2017 20:17'!test16priceTwoMultipleUnits	| cart |	cart := Cart withCatalogue: self instanceCatalogueWithPrices.	cart add: 1.	cart add: 1.	cart add: 231.	cart add: 231.	self assert: cart price equals: 66! !!CartTests methodsFor: 'tests' stamp: 'LosPibes 10/30/2017 20:33'!test02bookCanBeAddedMultipleTimes	| cart book |	cart := Cart withCatalogue: self instanceCatalogueWithPrices.	book := 1.	self assert: (cart amount: book) equals: 0.	cart add: book amount: 2.	self assert: (cart amount: book) equals: 2.	self assert: cart size equals: 2! !!CartTests methodsFor: 'tests' stamp: 'LosPibes 10/30/2017 20:33'!test08ListOfMultipleBooksHasAccurateCounts	| cart book list computedList book2 |	cart := Cart withCatalogue: self instanceCatalogueWithPrices.	book := 231.	cart add: book amount: 2.	book2 := 321.	cart add: book2.	list := Set new.	list add: (Association key: 231 value: 2).	list add: (Association key: 321 value: 1).	computedList := cart list.	self assert: computedList size equals: 2.	self assert: computedList equals: list! !!CartTests methodsFor: 'tests' stamp: 'LosPibes 10/30/2017 17:03'!test09booksMustBeInCatalogue	| cart book catalogue book2 |	book := 2312.	book2 := 23111.	catalogue := Set new.	catalogue add: book.	cart := Cart withCatalogue: catalogue.	self should: [ cart add: book2 ] raise: UnknownBookException! !!CartTests methodsFor: 'tests' stamp: 'LosPibes 10/30/2017 20:33'!test01bookIsPresentAfterAdding	| cart book |	book := 1.	cart := Cart withCatalogue: self instanceCatalogueWithPrices.	self assert: (cart amount: book) equals: 0.	cart add: book.	self assert: (cart amount: book) equals: 1.	self assert: cart size equals: 1.! !!CartTests methodsFor: 'tests' stamp: 'LosPibes 10/30/2017 20:33'!test05listOfBooksOfEmptyCartIsEmpty	| cart |		cart := Cart withCatalogue: self instanceCatalogueWithPrices.	self assert: cart list size equals: 0! !!CartTests methodsFor: 'tests' stamp: 'LosPibes 10/30/2017 20:17'!test12priceEmpty	| cart |	cart := Cart withCatalogue: self instanceCatalogueWithPrices.	self assert: cart price equals: 0! !!CartTests methodsFor: 'tests' stamp: 'LosPibes 10/30/2017 20:33'!test03canHoldMultipleBooks	| cart book book2 |	cart := Cart withCatalogue: self instanceCatalogueWithPrices.	book := 1.	book2 := 2.	self assert: (cart amount: book) equals: 0.	cart add: book.	self assert: (cart amount: book) equals: 1.	self assert: (cart amount: book2) equals: 0.	cart add: book2.	self assert: (cart amount: book2) equals: 1.	self assert: cart size equals: 2! !!CartTests methodsFor: 'tests' stamp: 'LosPibes 10/30/2017 20:33'!test04canSearchByBookAlias	| cart book book2 |	cart := Cart withCatalogue: self instanceCatalogueWithPrices.	book := 1.	book2 := 1.	self assert: (cart amount: book) equals: 0.	cart add: book.	self assert: (cart amount: book) equals: 1.	self assert: (cart amount: book2) equals: 1.	cart add: book2.	self assert: (cart amount: book) equals: 2.	self assert: (cart amount: book2) equals: 2! !!CartTests methodsFor: 'tests' stamp: 'LosPibes 10/30/2017 20:34'!instanceCatalogueWithPrices	| catalogue |	catalogue := PriceTable new.	catalogue add: 1 price: 10 stock: 20.	catalogue add: 2 price: 13 stock: 2.	catalogue add: 231 price: 23 stock: 4.	catalogue add: 321 price: 433 stock: 4.	catalogue add: 444 price: 111 stock: 0.	^ catalogue! !!CartTests methodsFor: 'tests' stamp: 'LosPibes 10/30/2017 20:33'!test11amountsMustBeGreaterThanZero	| cart book |	cart := Cart withCatalogue: self instanceCatalogueWithPrices.	book := 231.	self should: [ cart add: book amount: 0 ] raise: InvalidAmountException! !!CartTests methodsFor: 'tests' stamp: 'LosPibes 10/30/2017 20:33'!instanceCatalogue	| catalogue |	catalogue := Set new.	catalogue add: 1.	catalogue add: 2.	catalogue add: 231.	catalogue add: 321.	^ catalogue! !!CartTests methodsFor: 'tests' stamp: 'LosPibes 10/30/2017 20:17'!test14priceTwo	| cart |	cart := Cart withCatalogue: self instanceCatalogueWithPrices.	cart add: 1.	cart add: 2.	self assert: cart price equals: 23! !!CartTests methodsFor: 'tests' stamp: 'LosPibes 10/30/2017 20:33'!test10amountsMustBeIntegers	| cart book |	cart := Cart withCatalogue: self instanceCatalogueWithPrices.	book := 231.	self should: [ cart add: book amount: 1 / 3 ] raise: InvalidAmountException! !!CartTests methodsFor: 'tests' stamp: 'LosPibes 10/30/2017 20:33'!test07ListOfSingleBookTwiceHasAccurateCounts	| cart book list computedList |	cart := Cart withCatalogue: self instanceCatalogueWithPrices.	book := 231.	cart add: book amount: 2.	list := Set new.	list add: (Association key: 231 value: 2).	computedList := cart list.	self assert: computedList size equals: 1.	self assert: computedList equals: list! !Object subclass: #Cashier	instanceVariableNames: 'catalogue merchantProcessor clock'	classVariableNames: ''	poolDictionaries: ''	category: 'TusLibros-Ejercicio'!!Cashier methodsFor: 'as yet unclassified' stamp: 'LosPibes 10/30/2017 21:28'!checkout: aCart for: aCard processor: aPaymentProcessor timestamp: aTimestamp salesBook: aSalesBook	| price transaction |	aCart isEmpty		ifTrue: [ EmptyCartCheckoutException new signal ].	aCart checkStock.	price := aCart price.	(aCard hasExpired: aTimestamp monthOfYear)		ifTrue: [ InvalidCreditCardExpirationDateException new signal ].	"TODO: MP"	transaction := Transaction		initializeCart: aCart		price: price		card: aCard		timestamp: aTimestamp.	aSalesBook add: transaction.	aCart updateStock.	^ transaction! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Cashier class	instanceVariableNames: ''!!Cashier class methodsFor: 'as yet unclassified' stamp: 'LosPibes 10/30/2017 18:09'!withCatalogue: aCatalogue merchantProcessor: aMerchantProcessor clock: aClock	^ super new initializeCatalogue: aCatalogue merchantProcessor: aMerchantProcessor clock: aClock.! !TestCase subclass: #CashierTests	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TusLibros-Ejercicio'!!CashierTests methodsFor: 'tests' stamp: 'LosPibes 10/30/2017 21:13'!test03checkoutExpiredCard	| cashier cart catalogue salesBook timestamp |	catalogue := self instanceCatalogueWithPrices.	salesBook := OrderedCollection new.	cashier := Cashier new.	timestamp := January first , 2004.	cart := Cart withCatalogue: self instanceCatalogueWithPrices.	cart add: 1.	self		should: [ cashier				checkout: cart				for: (self instanceExpiredCreditCard: timestamp)				processor: nil				timestamp: timestamp				salesBook: salesBook ]		raise: InvalidCreditCardExpirationDateException.	" El stock y ventas no cambian "	self assert: salesBook isEmpty.	self assert: catalogue stock equals: self instanceCatalogueWithPrices stock! !!CashierTests methodsFor: 'tests' stamp: 'LosPibes 10/30/2017 20:33'!instanceCatalogueWithPrices	| catalogue |	catalogue := PriceTable new.	catalogue add: 1 price: 10 stock: 20.	catalogue add: 2 price: 13 stock: 2.	catalogue add: 231 price: 23 stock: 4.	catalogue add: 321 price: 433 stock: 4.	catalogue add: 444 price: 111 stock: 0.	^ catalogue! !!CashierTests methodsFor: 'tests' stamp: 'LosPibes 10/30/2017 20:49'!test02checkoutNotEnoughStock	| cashier cart catalogue salesBook |	catalogue := self instanceCatalogueWithPrices.	salesBook := OrderedCollection new.	cashier := Cashier new.	cart := Cart withCatalogue: self instanceCatalogueWithPrices.	cart add: 444.	self		should: [ cashier				checkout: cart				for: nil				processor: nil				timestamp: nil				salesBook: salesBook ]		raise: NoStockException.	" El stock y ventas no cambian "	self assert: salesBook isEmpty.	self assert: catalogue stock equals: self instanceCatalogueWithPrices stock! !!CashierTests methodsFor: 'tests' stamp: 'LosPibes 10/30/2017 21:39'!test04checkoutAddsToSaleBook	| cashier cart catalogue salesBook timestamp transaction card oldStock newStock |	catalogue := self instanceCatalogueWithPrices.	oldStock := self instanceCatalogueWithPrices stock.	salesBook := OrderedCollection new.	cashier := Cashier new.	timestamp := January first , 2004.	cart := Cart withCatalogue: self instanceCatalogueWithPrices.	cart add: 1.	card := self instanceNonExpiredCreditCard: timestamp.	transaction := cashier		checkout: cart		for: card		processor: nil		timestamp: timestamp		salesBook: salesBook.	self assert: transaction cart equals: cart.	self assert: transaction price equals: cart price.	self assert: transaction card equals: card.	self assert: transaction timestamp equals: timestamp.	self assert: salesBook first equals: transaction.	self assert: salesBook size equals: 1.	newStock := catalogue stock.	self assert: (oldStock occurrencesOf: 1) equals: (newStock occurrencesOf: 1) + 1! !!CashierTests methodsFor: 'tests' stamp: 'LosPibes 10/30/2017 20:41'!test01checkoutEmpty	| cashier cart catalogue salesBook |	catalogue := self instanceCatalogueWithPrices.	salesBook := OrderedCollection new.	cashier := Cashier new.	cart := Cart withCatalogue: self instanceCatalogueWithPrices.	self		should: [ cashier				checkout: cart				for: nil				processor: nil				timestamp: nil				salesBook: salesBook ]		raise: EmptyCartCheckoutException.	" El stock y ventas no cambian "	self assert: salesBook isEmpty.	self assert: catalogue stock equals: self instanceCatalogueWithPrices stock! !!CashierTests methodsFor: 'as yet unclassified' stamp: 'LosPibes 10/30/2017 21:20'!instanceNonExpiredCreditCard: currentDate	^ CreditCard		owner: 'Roberto Bolanos'		number: 1234567891234567		expiration: (currentDate next: (TimeUnits month with: 1)) monthOfYear! !!CashierTests methodsFor: 'as yet unclassified' stamp: 'LosPibes 10/30/2017 21:05'!instanceExpiredCreditCard: currentDate	^ CreditCard		owner: 'Roberto Bolanos'		number: 1234567891234567		expiration: (currentDate previous: (TimeUnits month with: 1)) monthOfYear! !Object subclass: #CreditCard	instanceVariableNames: 'name number expiration'	classVariableNames: ''	poolDictionaries: ''	category: 'TusLibros-Ejercicio'!!CreditCard methodsFor: 'as yet unclassified' stamp: 'LosPibes 10/30/2017 20:53'!owner: aName number: aNumber expiration: aDate 	name := aName.	number := aNumber.	expiration := aDate.! !!CreditCard methodsFor: '*Aconcagua-Extensions' stamp: 'LosPibes 10/30/2017 21:03'!hasExpired: aMonthOfYear	^ self expiration < aMonthOfYear.! !!CreditCard methodsFor: 'accessing' stamp: 'LosPibes 10/30/2017 21:15'!expiration	^ expiration! !!CreditCard methodsFor: 'accessing' stamp: 'LosPibes 10/30/2017 21:15'!number	^ number.! !!CreditCard methodsFor: 'accessing' stamp: 'LosPibes 10/30/2017 21:14'!owner	^ name! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CreditCard class	instanceVariableNames: ''!!CreditCard class methodsFor: 'as yet unclassified' stamp: 'LosPibes 10/30/2017 20:53'!owner: aName number: aNumber expiration: aDate 	^ super new owner: aName number: aNumber expiration: aDate.! !Exception subclass: #EmptyCartCheckoutException	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TusLibros-Ejercicio'!Exception subclass: #InvalidAmountException	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TusLibros-Ejercicio'!Exception subclass: #InvalidCreditCardExpirationDateException	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TusLibros-Ejercicio'!Exception subclass: #InvalidCreditCardNumberException	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TusLibros-Ejercicio'!Exception subclass: #InvalidCreditCardOwnerNameException	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TusLibros-Ejercicio'!Exception subclass: #InvalidPriceException	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TusLibros-Ejercicio'!Object subclass: #MerchantProcessor	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TusLibros-Ejercicio'!Exception subclass: #NeedACatalogueException	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TusLibros-Ejercicio'!Exception subclass: #NoStockException	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TusLibros-Ejercicio'!Object subclass: #PriceTable	instanceVariableNames: 'prices stock'	classVariableNames: ''	poolDictionaries: ''	category: 'TusLibros-Ejercicio'!!PriceTable methodsFor: 'initialization' stamp: 'LosPibes 10/30/2017 17:27'!initialize	stock := Bag new.	prices := Dictionary new.! !!PriceTable methodsFor: 'testing' stamp: 'LosPibes 10/30/2017 19:47'!stock	^ stock! !!PriceTable methodsFor: 'as yet unclassified' stamp: 'LosPibes 10/30/2017 21:34'!updateStock: aCart 	aCart list		do: [ :aBook | 			| book amount |			book := aBook key.			amount := aBook value.			amount timesRepeat: [ stock remove: book ifAbsent: [ ] ]].! !!PriceTable methodsFor: 'accessing' stamp: 'LosPibes 10/30/2017 17:28'!includes: aBook	^ stock includes: aBook! !!PriceTable methodsFor: 'accessing' stamp: 'LosPibes 10/30/2017 17:56'!price: aBook		^ [ prices at: aBook ] on: KeyNotFound do: [ UnknownBookException new signal. ]! !!PriceTable methodsFor: 'accessing' stamp: 'LosPibes 10/30/2017 18:00'!stock: aBook	(self includes: aBook) ifFalse: [ UnknownBookException new signal ].	^ stock occurrencesOf: aBook! !!PriceTable methodsFor: 'adding' stamp: 'LosPibes 10/30/2017 17:24'!add: aBook price: aPrice	^ self add: aBook price: aPrice stock: 0! !!PriceTable methodsFor: 'adding' stamp: 'LosPibes 10/30/2017 17:26'!add: aBook price: aPrice stock: anAmount	aPrice > 0		ifFalse: [ ^ InvalidPriceException new signal ].	(anAmount isKindOf: Integer)		ifFalse: [ ^ InvalidAmountException new signal ].	anAmount >= 0		ifFalse: [ ^ InvalidAmountException new signal ].	stock add: aBook withOccurrences: anAmount.	prices add: (Association key: aBook value: aPrice)! !TestCase subclass: #PriceTableTests	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TusLibros-Ejercicio'!!PriceTableTests methodsFor: 'tests' stamp: 'LosPibes 10/30/2017 18:00'!test01emptyCanNotPrice	| table |	table := PriceTable new.	self assert: (table includes: 2) equals: false.	self should: [ table price: 2 ] raise: UnknownBookException.	self should: [ table stock: 2 ] raise: UnknownBookException! !!PriceTableTests methodsFor: 'tests' stamp: 'LosPibes 10/30/2017 18:01'!test02singleBookPrice	| table |	table := PriceTable new.	table add: 2 price: 5 stock: 0.	self assert: (table includes: 2) equals: true.	self assert: (table price: 2) equals: 5.	self assert: (table stock: 2) equals: 0.		self assert: (table includes: 5) equals: false.! !Object subclass: #Transaction	instanceVariableNames: 'cart price card timestamp'	classVariableNames: ''	poolDictionaries: ''	category: 'TusLibros-Ejercicio'!!Transaction methodsFor: 'as yet unclassified' stamp: 'LosPibes 10/30/2017 19:28'!card	^ card! !!Transaction methodsFor: 'as yet unclassified' stamp: 'LosPibes 10/30/2017 19:29'!initializeCart: aCart price: aPrice card: aCard timestamp: aTimestamp	cart := aCart.	price := aPrice.	card := aCard.	timestamp := aTimestamp.! !!Transaction methodsFor: 'as yet unclassified' stamp: 'LosPibes 10/30/2017 19:28'!timestamp	^ timestamp! !!Transaction methodsFor: 'as yet unclassified' stamp: 'LosPibes 10/30/2017 19:28'!cart	^ cart! !!Transaction methodsFor: 'as yet unclassified' stamp: 'LosPibes 10/30/2017 19:28'!price	^ price! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Transaction class	instanceVariableNames: ''!!Transaction class methodsFor: 'as yet unclassified' stamp: 'LosPibes 10/30/2017 19:29'!initializeCart: aCart price: aPrice card: aCard timestamp: aTimestamp 	^ super new initializeCart: aCart price: aPrice card: aCard timestamp: aTimestamp.! !Exception subclass: #UnknownBookException	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TusLibros-Ejercicio'!