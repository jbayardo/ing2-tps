Object subclass: #Book	instanceVariableNames: 'titulo autor isbn'	classVariableNames: ''	poolDictionaries: ''	category: 'TusLibros-Ejercicio'!!Book methodsFor: 'accessing' stamp: 'LosPibes 10/26/2017 18:48'!title	^ titulo! !!Book methodsFor: 'accessing' stamp: 'LosPibes 10/26/2017 18:57'!hash	^ self isbn hash.! !!Book methodsFor: 'accessing' stamp: 'LosPibes 10/26/2017 18:57'!= aBook	^ self isbn = aBook isbn.! !!Book methodsFor: 'accessing' stamp: 'LosPibes 10/26/2017 18:45'!isbn	^ isbn! !!Book methodsFor: 'accessing' stamp: 'LosPibes 10/26/2017 18:47'!author	^ autor! !!Book methodsFor: 'accessing' stamp: 'LosPibes 10/26/2017 18:48'!isbn: ISBN title: aTitle author: anAuthor	isbn := ISBN.	titulo := aTitle.	autor := anAuthor.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Book class	instanceVariableNames: ''!!Book class methodsFor: 'as yet unclassified' stamp: 'LosPibes 10/26/2017 18:48'!isbn: ISBN title: titulo author: autor	^ Book new		isbn: ISBN		title: titulo		author: autor.! !TestCase subclass: #BookTests	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TusLibros-Ejercicio'!!BookTests methodsFor: 'tests' stamp: 'LosPibes 10/26/2017 18:49'!test01	| book |	book := Book isbn: 01 title: 'Test' author: 'Pirulo'.	self assert: book isbn equals: 01. 	self assert: book title equals: 'Test'.	self assert: book author equals: 'Pirulo'.! !Object subclass: #Cart	instanceVariableNames: 'books catalogue'	classVariableNames: ''	poolDictionaries: ''	category: 'TusLibros-Ejercicio'!!Cart methodsFor: 'accessing' stamp: 'LosPibes 10/26/2017 20:38'!size	^ books size! !!Cart methodsFor: 'accessing' stamp: 'LosPibes 10/26/2017 20:12'!list	| aList |	aList := Set new.	books		doWithOccurrences: [ :aBook :occurrences | aList add: (Association key: aBook isbn value: occurrences) ].	^ aList! !!Cart methodsFor: 'accessing' stamp: 'LosPibes 10/26/2017 19:51'!amount: aBook	^ books occurrencesOf: aBook! !!Cart methodsFor: 'as yet unclassified' stamp: 'LosPibes 10/26/2017 20:51'!initializeCatalogue: aCatalogue 	catalogue := aCatalogue.! !!Cart methodsFor: 'adding' stamp: 'LosPibes 10/26/2017 21:39'!add: aBook amount: anAmount	(catalogue includes: aBook)		ifFalse: [ ^ UnknownBookException new signal ].	(anAmount isKindOf: Integer) ifFalse: [ ^ InvalidAmountException new signal ].	(anAmount >= 0) ifFalse: [ ^ InvalidAmountException new signal. ].	books add: aBook withOccurrences: anAmount.	^ self! !!Cart methodsFor: 'adding' stamp: 'LosPibes 10/26/2017 20:45'!add: aBook	^ self add: aBook amount: 1.! !!Cart methodsFor: 'initialization' stamp: 'LosPibes 10/26/2017 19:50'!initialize	books := Bag new.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Cart class	instanceVariableNames: ''!!Cart class methodsFor: 'as yet unclassified' stamp: 'LosPibes 10/26/2017 20:59'!withCatalogue: aCatalogue	^ super new initializeCatalogue: aCatalogue! !!Cart class methodsFor: 'instance creation' stamp: 'LosPibes 10/26/2017 20:59'!new	NeedACatalogueException new signal.! !TestCase subclass: #CartTests	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TusLibros-Ejercicio'!!CartTests methodsFor: 'tests' stamp: 'LosPibes 10/26/2017 20:54'!test04canSearchByBookAlias	| cart book book2 |		cart := Cart withCatalogue: self instanceCatalogue.	book := Book isbn: 01 title: 'Hola' author: 'BBB'.	book2 := Book isbn: 01 title: 'Hola' author: 'BBB'.	self assert: (cart amount: book) equals: 0.	cart add: book.	self assert: (cart amount: book) equals: 1.	self assert: (cart amount: book2) equals: 1.	cart add: book2.	self assert: (cart amount: book) equals: 2.	self assert: (cart amount: book2) equals: 2! !!CartTests methodsFor: 'tests' stamp: 'LosPibes 10/26/2017 20:54'!test00newCarIsEmpty	| cart |	cart := Cart withCatalogue: self instanceCatalogue .	self assert: cart size equals: 0! !!CartTests methodsFor: 'tests' stamp: 'LosPibes 10/26/2017 20:54'!test02bookCanBeAddedMultipleTimes	| cart book |	cart := Cart withCatalogue: self instanceCatalogue.	book := Book isbn: 01 title: 'Hola' author: 'BBB'.	self assert: (cart amount: book) equals: 0.	cart add: book amount: 2.	self assert: (cart amount: book) equals: 2.	self assert: cart size equals: 2! !!CartTests methodsFor: 'tests' stamp: 'LosPibes 10/26/2017 20:54'!test05listOfBooksOfEmptyCartIsEmpty	| cart |		cart := Cart withCatalogue: self instanceCatalogue.	self assert: cart list size equals: 0! !!CartTests methodsFor: 'tests' stamp: 'LosPibes 10/26/2017 20:55'!test08ListOfMultipleBooksHasAccurateCounts	| cart book list computedList book2 |	cart := Cart withCatalogue: self instanceCatalogue.	book := Book isbn: 231 title: 'Booo' author: 'Caaaa'.	cart add: book amount: 2.	book2 := Book isbn: 321 title: 'Holitas' author: 'Macri'.	cart add: book2.	list := Set new.	list add: (Association key: 231 value: 2).	list add: (Association key: 321 value: 1).	computedList := cart list.	self assert: computedList size equals: 2.	self assert: computedList equals: list! !!CartTests methodsFor: 'tests' stamp: 'LosPibes 10/26/2017 21:42'!test10amountsMustBeIntegers	| cart book |	cart := Cart withCatalogue: self instanceCatalogue.	book := Book isbn: 231 title: 'Booo' author: 'Caaaa'.	self should: [ cart add: book amount: 1 / 3 ] raise: InvalidAmountException! !!CartTests methodsFor: 'tests' stamp: 'LosPibes 10/26/2017 20:55'!test07ListOfSingleBookTwiceHasAccurateCounts	| cart book list computedList |	cart := Cart withCatalogue: self instanceCatalogue.	book := Book isbn: 231 title: 'Booo' author: 'Caaaa'.	cart add: book amount: 2.	list := Set new.	list add: (Association key: 231 value: 2).	computedList := cart list.	self assert: computedList size equals: 1.	self assert: computedList equals: list! !!CartTests methodsFor: 'tests' stamp: 'LosPibes 10/26/2017 20:54'!test01bookIsPresentAfterAdding	| cart book |	book := Book isbn: 01 title: 'Hola' author: 'BBB'.	cart := Cart withCatalogue: self instanceCatalogue .	self assert: (cart amount: book) equals: 0.	cart add: book.	self assert: (cart amount: book) equals: 1.	self assert: cart size equals: 1! !!CartTests methodsFor: 'tests' stamp: 'LosPibes 10/26/2017 20:55'!test06ListOfSingleBookHasAccurateCounts	| cart book list computedList |	cart := Cart withCatalogue: self instanceCatalogue.	book := Book isbn: 231 title: 'Booo' author: 'Caaaa'.	cart add: book.	list := Set new.	list add: (Association key: 231 value: 1).	computedList := cart list.	self assert: computedList size equals: 1.	self assert: computedList equals: list! !!CartTests methodsFor: 'tests' stamp: 'LosPibes 10/26/2017 21:29'!test09booksMustBeInCatalogue	| cart book catalogue book2 |	book := Book isbn: 2312 title: 'Hello' author: '2312'.	book2 := Book isbn: 23111 title: 'Jijiji' author: 'El Indio'.	catalogue := Set new.	catalogue add: book.	cart := Cart withCatalogue: catalogue.	self should: [ cart add: book2 ] raise: UnknownBookException! !!CartTests methodsFor: 'tests' stamp: 'LosPibes 10/26/2017 21:29'!instanceCatalogue	| catalogue |	catalogue := Set new.	catalogue add: (Book isbn: 01 title: 'Hola' author: 'BBB').	catalogue add: (Book isbn: 01 title: 'Hola' author: 'BBB').	catalogue add: (Book isbn: 02 title: 'Pirulio' author: 'Poroto').	catalogue add: (Book isbn: 231 title: 'Booo' author: 'Caaaa').	catalogue add: (Book isbn: 321 title: 'Holitas' author: 'Macri').	^ catalogue! !!CartTests methodsFor: 'tests' stamp: 'LosPibes 10/26/2017 20:54'!test03canHoldMultipleBooks	| cart book book2 |	cart := Cart withCatalogue: self instanceCatalogue.	book := Book isbn: 01 title: 'Hola' author: 'BBB'.	book2 := Book isbn: 02 title: 'Pirulio' author: 'Poroto'.	self assert: (cart amount: book) equals: 0.	cart add: book.	self assert: (cart amount: book) equals: 1.	self assert: (cart amount: book2) equals: 0.	cart add: book2.	self assert: (cart amount: book2) equals: 1.	self assert: cart size equals: 2! !Object subclass: #Cashier	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TusLibros-Ejercicio'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Cashier class	instanceVariableNames: ''!!Cashier class methodsFor: 'as yet unclassified' stamp: 'LosPibes 10/26/2017 21:06'!withCatalogue: aCatalogue	^ super new initializeCatalogue: aCatalogue.! !!Cashier class methodsFor: 'instance creation' stamp: 'LosPibes 10/26/2017 21:06'!new	NeedACatalogueException new signal.! !TestCase subclass: #CashierTests	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TusLibros-Ejercicio'!!CashierTests methodsFor: 'tests' stamp: 'LosPibes 10/26/2017 21:10'!test01canPriceEmpty	! !!CashierTests methodsFor: 'tests' stamp: 'LosPibes 10/26/2017 21:30'!instanceCatalogue	| catalogue |	catalogue := Set new.	catalogue add: (Book isbn: 01 title: 'Hola' author: 'BBB').	catalogue add: (Book isbn: 01 title: 'Hola' author: 'BBB').	catalogue add: (Book isbn: 02 title: 'Pirulio' author: 'Poroto').	catalogue add: (Book isbn: 231 title: 'Booo' author: 'Caaaa').	catalogue add: (Book isbn: 321 title: 'Holitas' author: 'Macri').	^ catalogue! !Exception subclass: #InvalidAmountException	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TusLibros-Ejercicio'!Exception subclass: #NeedACatalogueException	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TusLibros-Ejercicio'!Object subclass: #PriceTable	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TusLibros-Ejercicio'!TestCase subclass: #PriceTableTests	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TusLibros-Ejercicio'!!PriceTableTests methodsFor: 'tests' stamp: 'LosPibes 10/26/2017 21:11'!test01canNotPriceUnavailableBooks! !Exception subclass: #UnknownBookException	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TusLibros-Ejercicio'!Object subclass: #User	instanceVariableNames: 'cart'	classVariableNames: ''	poolDictionaries: ''	category: 'TusLibros-Ejercicio'!!User methodsFor: 'initialization' stamp: 'LosPibes 10/26/2017 20:37'!initialize	cart := Cart new.! !!User methodsFor: 'as yet unclassified' stamp: 'LosPibes 10/26/2017 20:37'!cart	^ cart.! !TestCase subclass: #UserTests	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TusLibros-Ejercicio'!!UserTests methodsFor: 'tests' stamp: 'LosPibes 10/26/2017 20:38'!test01canCreateCart	| user cart |	user := User new.	cart := user cart.	self assert: cart size equals: 0! !